[
  {
    "objectID": "index.html#rstudio",
    "href": "index.html#rstudio",
    "title": "Introduction to R for MassWateR",
    "section": "RStudio",
    "text": "RStudio\nRStudio is the go-to Interactive Development Environment (IDE) for R. Rstudio includes many features to improve the user’s experience.\nLet’s get familiar with RStudio.\n\nOpen R and RStudio\nFind the RStudio shortcut on your computer and fire it up. You should see something like this:\n\n\n\n\n\nThere are four panes in RStudio:\n\nSource: Your primary window for writing code to send to the console, this is where you write and save R “scripts”\nConsole: This is where code is executed in R\nEnvironment, History, etc.: A tabbed window showing your working environment, code execution history, and other useful things\nFiles, plots, etc.: A tabbed window showing a file explorer, a plot window, list of installed packages, help files, and viewer\n\n\n\nScripting\nIn most cases, you will not enter and execute code directly in the console. Code can be written in a script and then sent directly to the console.\nOpen a new script from the File menu…\n\n\n\n\n\n\n\nExecuting code in RStudio\nAfter you write code in an R script, it can be sent to the Console to run the code. There are two ways to do this. First, you can hit the Run button at the top right of the scripting window. Second, you can use ctrl+enter (cmd+enter on a Mac)."
  },
  {
    "objectID": "index.html#r-language-fundamentals",
    "href": "index.html#r-language-fundamentals",
    "title": "Introduction to R for MassWateR",
    "section": "R language fundamentals",
    "text": "R language fundamentals\nR is built around functions. The basic syntax of a function follows the form: function_name(arg1, arg2, ...).\nWith the base install, you will gain access to many functions (2320, to be exact). Some examples:\n\n# print\nprint(\"hello world!\")\n\n[1] \"hello world!\"\n\n# sequence\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n# random numbers\nrnorm(100, mean = 10, sd = 2)\n\n  [1] 11.186821  9.720568  9.902816  9.729649  7.965670  7.688665 16.910278\n  [8]  7.675992 14.544590 12.360307  8.764813 15.090516 12.428743  9.416517\n [15]  7.772021  7.695600 14.075813  7.943131  6.455375  7.511465 11.187105\n [22] 12.491303 11.140993 11.580097  9.234447  7.046912 11.624774  9.751294\n [29] 11.745992  9.842594  9.018274  7.813030  6.088904  6.270071  9.008955\n [36] 11.342965  6.618592 12.948788  9.542944 10.528697 11.941268 12.102479\n [43]  9.161867 11.953339  9.205008 10.236859  8.948556 10.992508  8.312652\n [50]  8.726875 12.003656  7.535355 13.498295 11.229266  8.867718 11.853661\n [57] 10.378946 10.100183 11.305933  7.411276  7.134516 10.406362 13.838093\n [64]  8.681571 15.727882 10.705205  9.714532 14.999822 11.130968  8.745557\n [71] 12.294393 12.471629 10.758941 11.810155  6.895137  8.765676  9.369266\n [78]  7.310683  9.889475 10.507476 11.781330 11.070773  8.845498  7.902948\n [85]  8.793928 10.148249  9.254622 11.696399  7.447924  8.209482  8.590624\n [92] 12.799910  8.917261  6.697653 12.749465  9.861755  7.512544  9.007212\n [99]  9.068028 10.194980\n\n# average \nmean(rnorm(100))\n\n[1] -0.0241095\n\n# sum\nsum(rnorm(100))\n\n[1] -6.945375\n\n\nVery often you will see functions used like this:\n\nmy_random_sum <- sum(rnorm(100))\n\nThe first part of the line is the name of an object that you make up. The second bit, <-, is the assignment operator. This tells R to take the result of sum(rnorm(100)) and store it in an object named, my_random_sum. It is stored in the environment and can be used by just executing it’s name in the console.\n\nmy_random_sum\n\n[1] -5.63891\n\n\n\nWhat is the environment?\nThere are two outcomes when you run code. First, the code will simply print output directly in the console. Second, there is no output because you have stored it as a variable using <-. Output that is stored is saved in the environment. The environment is the collection of named objects that are stored in memory for your current R session."
  },
  {
    "objectID": "index.html#packages",
    "href": "index.html#packages",
    "title": "Introduction to R for MassWateR",
    "section": "Packages",
    "text": "Packages\nThe base installation of R is quite powerful. Packages allow you to include new methods for use in R.\n\nCRAN\nMany packages are available on CRAN, The Comprehensive R Archive Network. This is where you download R and also where most will gain access to packages. As of 2023-01-19, there are 19066 packages on CRAN!\n\n\nInstalling packages\nWhen a package gets installed, that means the source code is downloaded and put into your library. A default library location is set for you.\nWe use the install.packages() function to download and install a package. Here, we install the readxl package, used below.\n\ninstall.packages(\"readxl\")\n\nYou should see some text in the R console showing progress of the installation and a prompt after installation is done.\nAfter installation, you can load a package using the library() function. This makes all functions in a package available for you to use.\n\nlibrary(readxl)\n\nWe also want to install MassWateR from CRAN.\n\n# Install the package\ninstall.packages(\"MassWateR\")\n\nAn important aspect of packages is that you only need to download them once, but every time you start RStudio you need to load them with the library() function."
  },
  {
    "objectID": "index.html#data-structures-in-r",
    "href": "index.html#data-structures-in-r",
    "title": "Introduction to R for MassWateR",
    "section": "Data structures in R",
    "text": "Data structures in R\nNow we can talk about R data structures. Simply put, a data structure is a way for programming languages to handle information storage.\n\nVectors (one-dimensional data)\nThe basic data format in R is a vector - a one-dimensional grouping of elements that have the same type. These are all vectors and they are created with the c (concatenate) function:\n\ndbl_var <- c(1, 2.5, 4.5)\nint_var <- c(1L, 6L, 10L)\nlog_var <- c(TRUE, FALSE, T, F)\nchr_var <- c(\"a\", \"b\", \"c\")\n\nThe four types of vectors are double (or numeric), integer, logical, and character. Each type has some useful properties:\n\nclass(dbl_var)\n\n[1] \"numeric\"\n\nlength(log_var)\n\n[1] 4\n\n\n\n\nData frames (two-dimensional data)\nA collection of vectors represented as one data object are often described as two-dimensional data, or in R speak, a data frame. Here’s a simple example:\n\nltrs <- c(\"a\", \"b\", \"c\")\nnums <- c(1, 2, 3)\nlogs <- c(T, F, T)\nmydf <- data.frame(ltrs, nums, logs)\nmydf\n\n  ltrs nums  logs\n1    a    1  TRUE\n2    b    2 FALSE\n3    c    3  TRUE\n\n\nThe only constraints required to make a data frame are:\n\nEach column (vector) contains the same type of data\nThe number of observations in each column is equal."
  },
  {
    "objectID": "index.html#getting-your-data-into-r",
    "href": "index.html#getting-your-data-into-r",
    "title": "Introduction to R for MassWateR",
    "section": "Getting your data into R",
    "text": "Getting your data into R\nIt is the rare case when you manually enter your data in R. Most data analysis workflows typically begin with importing a dataset from an external source. We’ll be using read_excel() function from the readxl package.\nWe can import the ExampleSites.xlsx dataset as follows. Note the use of a relative file path. You can see what R is using as your “working directory” using the getwd() function.\n\nsitdat <- read_excel(\"data/ExampleSites.xlsx\")\n\nLet’s explore the dataset a bit.\n\n# get the dimensions\ndim(sitdat)\n\n[1] 11  5\n\n# get the column names\nnames(sitdat)\n\n[1] \"Monitoring Location ID\"        \"Monitoring Location Name\"     \n[3] \"Monitoring Location Latitude\"  \"Monitoring Location Longitude\"\n[5] \"Location Group\"               \n\n# see the first six rows\nhead(sitdat)\n\n# A tibble: 6 × 5\n  `Monitoring Location ID` `Monitoring Location Name` Monitori…¹ Monit…² Locat…³\n  <chr>                    <chr>                           <dbl>   <dbl> <chr>  \n1 ABT-026                  Rte 2, Concord                   42.5   -71.4 Assabet\n2 ABT-062                  Rte 62, Acton                    42.4   -71.4 Assabet\n3 ABT-077                  Rte 27/USGS, Maynard             42.4   -71.4 Assabet\n4 ABT-144                  Rte 62, Stow                     42.4   -71.5 Assabet\n5 ABT-237                  Robin Hill Rd, Marlboro          42.3   -71.6 Assabet\n6 ABT-301                  Rte 9, Westboro                  42.3   -71.6 Assabet\n# … with abbreviated variable names ¹​`Monitoring Location Latitude`,\n#   ²​`Monitoring Location Longitude`, ³​`Location Group`\n\n# get the overall structure\nstr(sitdat)\n\ntibble [11 × 5] (S3: tbl_df/tbl/data.frame)\n $ Monitoring Location ID       : chr [1:11] \"ABT-026\" \"ABT-062\" \"ABT-077\" \"ABT-144\" ...\n $ Monitoring Location Name     : chr [1:11] \"Rte 2, Concord\" \"Rte 62, Acton\" \"Rte 27/USGS, Maynard\" \"Rte 62, Stow\" ...\n $ Monitoring Location Latitude : num [1:11] 42.5 42.4 42.4 42.4 42.3 ...\n $ Monitoring Location Longitude: num [1:11] -71.4 -71.4 -71.4 -71.5 -71.6 ...\n $ Location Group               : chr [1:11] \"Assabet\" \"Assabet\" \"Assabet\" \"Assabet\" ...\n\n\nYou can also view a dataset in a spreadsheet style using the View() function:\n\nView(sitdat)"
  },
  {
    "objectID": "index.html#summary",
    "href": "index.html#summary",
    "title": "Introduction to R for MassWateR",
    "section": "Summary",
    "text": "Summary\nIn this intro we learned about R and Rstudio, some of the basic syntax and data structures in R, and how to import files."
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup R and RStudio",
    "section": "",
    "text": "Thanks for your interest in the MassWateR R package. For the package workshops, we will be using RStudio as our interface to R. In order to participate in this testing, you will need to make sure you have R and RStudio installed on your computer.\nThanks to the USGS-R Training group and Data Carpentry for making their installation materials available. The following instructions come directly from their materials, with a few minor edits to help you get set up."
  },
  {
    "objectID": "setup.html#install-r-and-rstudio",
    "href": "setup.html#install-r-and-rstudio",
    "title": "Setup R and RStudio",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\nR and RStudio are separate downloads and installations. R is the underlying statistical computing software. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio.\n\nWindows: Download and install R\nGo to CRAN and download the R installer for Windows. Make sure to choose the latest stable version (v4.2.2 as of January 2023).\nOnce the installer downloads, Right-click on it and select “Run as administrator”.\nType in your credentials and click yes (or if you don’t have administrator access have your IT rep install with Admin privileges).\n\nYou can click next through the standard dialogs and accept most defaults. But at the destination screen, please verify that it is installing it to C:\\Program Files\\R\n\nAt the “Select Components” screen, you can accept the default and install both 32-bit and 64-bit versions.\n\nAt this screen, uncheck ‘Create a desktop icon’ because non-admin users in Windows will be unable to delete it.\n\n\n\nWindows: Download and install RStudio\nDownload RStudio from here.\nAfter download, double-click the installer. It will ask for your administrator credentials to install (you might need to have your IT rep install again).\nAccept all the default options for the RStudio install.\n\n\n\nmacOS: Download and install R\n\nDownload and install R from the CRAN website for Mac here.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\n\n\n\nmacOS: Download and install RStudio\n\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Mac OS X 10.6+ (64-bit) (where x, y, and z represent version numbers)\nDouble click the file to install RStudio"
  },
  {
    "objectID": "setup.html#check-install",
    "href": "setup.html#check-install",
    "title": "Setup R and RStudio",
    "section": "Check Install",
    "text": "Check Install\n\nOpen RStudio\nOnce installed, RStudio should be accessible from the start menu. Start up RStudio. Once running it should look something like this:"
  },
  {
    "objectID": "setup.html#install-masswater-optional",
    "href": "setup.html#install-masswater-optional",
    "title": "Setup R and RStudio",
    "section": "Install MassWateR (optional)",
    "text": "Install MassWateR (optional)\nThe MassWateR package can be installed from CRAN by running the code below in the RStudio console. The installation will also be covered during the workshop.\n\n# Install the package\ninstall.packages('MassWateR')\n\nThe installation will take a minute or so to download. You will see text and several messages in the console during the download. Once it’s finished, verify the installation worked by loading the package from your library.\n\nlibrary(MassWateR)"
  },
  {
    "objectID": "setup.html#posit-cloud-optional",
    "href": "setup.html#posit-cloud-optional",
    "title": "Setup R and RStudio",
    "section": "Posit Cloud (optional)",
    "text": "Posit Cloud (optional)\nIf you can’t install R or RStudio prior to the workshop, you can use use RStudio in the cloud on the Posit website. This is only a backup option and we strongly encourage you to troubleshoot the installation when able.\nTo use RStudio in the cloud, copy this link and paste it in a web browser: https://posit.cloud/project/4426781\nIf you do not have a Posit Cloud account, you will see this screen when you first visit the URL:\n\n\nYou can setup an account for free using a login you create or through a third-party (Google or GitHub).\nAfter your account is setup, you should a screen that looks something like this:\n\n\nYou’ll see that this is a TEMPORARY COPY under your account. Make it permanent by clicking the button on top. This will save any changes you make to this project under your account.\nThis project includes an installation of MassWateR that you can use for the workshop."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website provides a short introduction to R for workshops on the MassWateR R package.\n\n\n\n\n\nAll website content created by Marcus Beck."
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "The following resources are available for training and testing. Please download and save copies to your computer as needed.\n\nSample Surface water quality results: link\nSample Data quality objectives for accuracy: link\nSample Data quality objectives for frequency and completeness: link\nSample Site metadata: link\nSample WQX metadata: link\nParameter mapping: link\nParameter thresholds: link"
  }
]