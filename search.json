[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "All website content created by Marcus Beck."
  },
  {
    "objectID": "index.html#rstudio",
    "href": "index.html#rstudio",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "RStudio",
    "text": "RStudio\nRStudio is the go-to Interactive Development Environment (IDE) for R. Rstudio includes many features to improve the user’s experience.\nLet’s get familiar with RStudio.\n\nOpen R and RStudio\nFind the RStudio shortcut on your computer and fire it up. You should see something like this:\n\n\n\n\n\nThere are four panes in RStudio:\n\nSource: Your primary window for writing code to send to the console, this is where you write and save R “scripts”\nConsole: This is where code is executed in R\nEnvironment, History, etc.: A tabbed window showing your working environment, code execution history, and other useful things\nFiles, plots, etc.: A tabbed window showing a file explorer, a plot window, list of installed packages, help files, and viewer\n\n\n\nScripting\nIn most cases, you will not enter and execute code directly in the console. Code can be written in a script and then sent directly to the console.\nOpen a new script from the File menu…\n\n\n\n\n\n\n\nExecuting code in RStudio\nAfter you write code in an R script, it can be sent to the Console to run the code. There are two ways to do this. First, you can hit the Run button at the top right of the scripting window. Second, you can use ctrl+enter (cmd+enter on a Mac)."
  },
  {
    "objectID": "index.html#r-language-fundamentals",
    "href": "index.html#r-language-fundamentals",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "R language fundamentals",
    "text": "R language fundamentals\nR is built around functions. The basic syntax of a function follows the form: function_name(arg1, arg2, ...).\nWith the base install, you will gain access to many functions (2320, to be exact). Some examples:\n\n# print\nprint(\"hello world!\")\n\n[1] \"hello world!\"\n\n# sequence\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n# random numbers\nrnorm(100, mean = 10, sd = 2)\n\n  [1] 12.828035  9.016948 10.131747 10.200079 11.807059  9.133154  9.844303\n  [8] 14.182188 14.121396  6.099749  9.139083 11.180350  7.058552 12.137243\n [15]  9.149511  9.778665 14.166254  9.097688 10.608656 11.325004  9.748585\n [22]  9.101963 10.440239 11.481090 13.594630 11.542068  9.738063  9.581544\n [29] 12.651311  8.674438 10.783677 10.387937 10.694674  8.710559  5.665482\n [36]  9.905964  6.484504 11.414779 13.050673 11.019318 12.206523 10.039706\n [43]  7.171173 13.410654 13.055190  8.656891  9.524217 10.453663  9.942489\n [50]  8.304480  9.536668 10.941898  9.719122 13.624969  8.333301  6.526117\n [57] 10.920219  9.968033  7.887910  8.644374 12.875188  8.910804 12.656622\n [64]  9.529356 12.618940  9.184091 11.289110 10.185975 12.402943  9.875606\n [71] 10.066871 11.160725  7.714689  8.710584  9.658189  9.336548 11.346880\n [78] 10.643675  8.033842  9.539844  8.491975 11.806218 10.749423 11.087758\n [85]  9.512242 10.894841 11.152629 11.376723  7.020817 10.497080 14.531934\n [92]  8.514620  9.419478  8.803780 11.623286 10.984968 13.322418 10.003803\n [99]  7.723128  8.803986\n\n# average \nmean(rnorm(100))\n\n[1] 0.01254951\n\n# sum\nsum(rnorm(100))\n\n[1] -1.549047\n\n\nVery often you will see functions used like this:\n\nmy_random_sum <- sum(rnorm(100))\n\nThe first part of the line is the name of an object that you make up. The second bit, <-, is the assignment operator. This tells R to take the result of sum(rnorm(100)) and store it in an object named, my_random_sum. It is stored in the environment and can be used by just executing it’s name in the console.\n\nmy_random_sum\n\n[1] -14.40131\n\n\n\nWhat is the environment?\nThere are two outcomes when you run code. First, the code will simply print output directly in the console. Second, there is no output because you have stored it as a variable using <-. Output that is stored is saved in the environment. The environment is the collection of named objects that are stored in memory for your current R session."
  },
  {
    "objectID": "index.html#packages",
    "href": "index.html#packages",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Packages",
    "text": "Packages\nThe base installation of R is quite powerful. Packages allow you to include new methods for use in R.\n\nCRAN\nMany packages are available on CRAN, The Comprehensive R Archive Network. This is where you download R and also where most will gain access to packages. As of 2022-09-08, there are 18584 packages on CRAN!\n\n\nInstalling packages\nWhen a package gets installed, that means the source code is downloaded and put into your library. A default library location is set for you.\nWe use the install.packages() function to download and install a package. Here, we install the readxl package.\n\ninstall.packages(\"readxl\")\n\nYou should see some text in the R console showing progress of the installation and a prompt after installation is done.\nAfter installation, you can load a package using the library() function. This makes all functions in a package available for you to use.\n\nlibrary(readxl)\n\nLet’s also install dplyr, as we’ll need it later.\n\ninstall.packages(\"dplyr\")\n\nWe also want to install MassWateR. This package is not on CRAN, so we need to change a few options first.\n\n# Enable universe(s) by massbays-tech\noptions(repos = c(\n  massbaystech = \"https://massbays-tech.r-universe.dev\",\n  CRAN = \"https://cloud.r-project.org\"))\n\n# Install the package\ninstall.packages(\"MassWateR\")\n\nAn important aspect of packages is that you only need to download them once, but every time you start RStudio you need to load them with the library() function."
  },
  {
    "objectID": "index.html#data-structures-in-r",
    "href": "index.html#data-structures-in-r",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Data structures in R",
    "text": "Data structures in R\nNow we can talk about R data structures. Simply put, a data structure is a way for programming languages to handle information storage.\n\nVectors (one-dimensional data)\nThe basic data format in R is a vector - a one-dimensional grouping of elements that have the same type. These are all vectors and they are created with the c (concatenate) function:\n\ndbl_var <- c(1, 2.5, 4.5)\nint_var <- c(1L, 6L, 10L)\nlog_var <- c(TRUE, FALSE, T, F)\nchr_var <- c(\"a\", \"b\", \"c\")\n\nThe four types of vectors are double (or numeric), integer, logical, and character. Each type has some useful properties:\n\nclass(dbl_var)\n\n[1] \"numeric\"\n\nlength(log_var)\n\n[1] 4\n\n\n\n\nData frames (two-dimensional data)\nA collection of vectors represented as one data object are often described as two-dimensional data, or in R speak, a data frame. Here’s a simple example:\n\nltrs <- c(\"a\", \"b\", \"c\")\nnums <- c(1, 2, 3)\nlogs <- c(T, F, T)\nmydf <- data.frame(ltrs, nums, logs)\nmydf\n\n  ltrs nums  logs\n1    a    1  TRUE\n2    b    2 FALSE\n3    c    3  TRUE\n\n\nThe only constraints required to make a data frame are:\n\nEach column (vector) contains the same type of data\nThe number of observations in each column is equal."
  },
  {
    "objectID": "index.html#getting-your-data-into-r",
    "href": "index.html#getting-your-data-into-r",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Getting your data into R",
    "text": "Getting your data into R\nIt is the rare case when you manually enter your data in R. Most data analysis workflows typically begin with importing a dataset from an external source. We’ll be using read_excel() function from the readxl package.\nWe can import the ExampleSites.xlsx dataset as follows. Note the use of a relative file path. You can see what R is using as your “working directory” using the getwd() function.\n\nsitdat <- read_excel(\"data/ExampleSites.xlsx\")\n\nLet’s explore the dataset a bit.\n\n# get the dimensions\ndim(sitdat)\n\n[1] 58  5\n\n# get the column names\nnames(sitdat)\n\n[1] \"Monitoring Location ID\"        \"Monitoring Location Name\"     \n[3] \"Monitoring Location Latitude\"  \"Monitoring Location Longitude\"\n[5] \"Location Group\"               \n\n# see the first six rows\nhead(sitdat)\n\n# A tibble: 6 × 5\n  `Monitoring Location ID` `Monitoring Location Name`    Monit…¹ Monit…² Locat…³\n  <chr>                    <chr>                           <dbl>   <dbl> <chr>  \n1 ABT-010                  477 Lowell Rd, Concord           42.5   -71.4 Lower …\n2 ABT-026                  Rte 2, Concord                   42.5   -71.4 Lower …\n3 ABT-033                  Rte 62, W Concord                42.5   -71.4 Lower …\n4 ABT-044                  Rte 62 (Damonmill), W Concord    42.5   -71.4 Lower …\n5 ABT-047                  Damonmill dam                    42.5   -71.4 Lower …\n6 ABT-062                  Rte 62, Acton                    42.4   -71.4 Lower …\n# … with abbreviated variable names ¹​`Monitoring Location Latitude`,\n#   ²​`Monitoring Location Longitude`, ³​`Location Group`\n\n# get the overall structure\nstr(sitdat)\n\ntibble [58 × 5] (S3: tbl_df/tbl/data.frame)\n $ Monitoring Location ID       : chr [1:58] \"ABT-010\" \"ABT-026\" \"ABT-033\" \"ABT-044\" ...\n $ Monitoring Location Name     : chr [1:58] \"477 Lowell Rd, Concord\" \"Rte 2, Concord\" \"Rte 62, W Concord\" \"Rte 62 (Damonmill), W Concord\" ...\n $ Monitoring Location Latitude : num [1:58] 42.5 42.5 42.5 42.5 42.5 ...\n $ Monitoring Location Longitude: num [1:58] -71.4 -71.4 -71.4 -71.4 -71.4 ...\n $ Location Group               : chr [1:58] \"Lower Assabet\" \"Lower Assabet\" \"Lower Assabet\" \"Lower Assabet\" ...\n\n\nYou can also view a dataset in a spreadsheet style using the View() function:\n\nView(sitdat)"
  },
  {
    "objectID": "index.html#summary",
    "href": "index.html#summary",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Summary",
    "text": "Summary\nIn this intro we learned about R and Rstudio, some of the basic syntax and data structures in R, and how to import files. Next we’ll talk about MassWateR and proceed with the beta testing."
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Meeting Agenda: link\nSurface water quality results: link\nData quality objectives for accuracy: link\nData quality objectives for frequency and completeness: link\nSite metadata: link\nBeta testing code (Word file): link\nBeta testing code (R file): link\nIntro to R code (R file): link\nIntro to R example file: link"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup R and RStudio",
    "section": "",
    "text": "Thanks for your interest in the MassWateR R package. For the package beta testing, we will be using RStudio as our interface to R. In order to participate in this testing, you will need to make sure you have R and RStudio installed on your computer.\nThanks to the USGS-R Training group and Data Carpentry for making their installation materials available. The following instructions come directly from their materials, with a few minor edits to help you get set up."
  },
  {
    "objectID": "setup.html#install-r-and-rstudio",
    "href": "setup.html#install-r-and-rstudio",
    "title": "Setup R and RStudio",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\nR and RStudio are separate downloads and installations. R is the underlying statistical computing software. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio.\n\nWindows: Download and install R\nGo to CRAN and download the R installer for Windows. Make sure to choose the latest stable version (v4.2.1 as of September 2022).\nOnce the installer downloads, Right-click on it and select “Run as administrator”.\nType in your credentials and click yes (or if you don’t have administrator access have your IT rep install with Admin privileges).\n\nYou can click next through the standard dialogs and accept most defaults. But at the destination screen, please verify that it is installing it to C:\\Program Files\\R\n\nAt the “Select Components” screen, you can accept the default and install both 32-bit and 64-bit versions.\n\nAt this screen, uncheck ‘Create a desktop icon’ because non-admin users in Windows will be unable to delete it.\n\n\n\nWindows: Download and install RStudio\nDownload RStudio from here.\nAfter download, double-click the installer. It will ask for your administrator credentials to install (you might need to have your IT rep install again).\nAccept all the default options for the RStudio install.\n\n\n\nmacOS: Download and install R\n\nDownload and install R from the CRAN website for Mac here.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\n\n\n\nmacOS: Download and install RStudio\n\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Mac OS X 10.6+ (64-bit) (where x, y, and z represent version numbers)\nDouble click the file to install RStudio"
  },
  {
    "objectID": "setup.html#check-install",
    "href": "setup.html#check-install",
    "title": "Setup R and RStudio",
    "section": "Check Install",
    "text": "Check Install\n\nOpen RStudio\nOnce installed, RStudio should be accessible from the start menu. Start up RStudio. Once running it should look something like this:"
  },
  {
    "objectID": "setup.html#rstudio-cloud",
    "href": "setup.html#rstudio-cloud",
    "title": "Setup R and RStudio",
    "section": "RStudio Cloud",
    "text": "RStudio Cloud\nIf you can’t install R or RStudio prior to beta testing, you can use use RStudio in the cloud. This is only a backup option and we strongly encourage you to troubleshoot the installation when able.\nTo use RStudio Cloud, copy this link and paste it in a web browser: https://rstudio.cloud/project/4426781\nIf you do not have an RStudio Cloud account, you will see this screen when you first visit the URL:\n\n\nYou can setup an account for free using a login you create or through a third-party (Google or GitHub).\nAfter your account is setup, you should a screen that looks something like this:\n\n\nYou’ll see that this is a TEMPORARY COPY under your account. Make it permanent by clicking the button on top. This will save any changes you make to this project under your account.\nThis project includes an installation of MassWateR and a copy of the code used in the introduction on this site."
  }
]