[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "All website content created by Marcus Beck."
  },
  {
    "objectID": "index.html#rstudio",
    "href": "index.html#rstudio",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "RStudio",
    "text": "RStudio\nRStudio is the go-to Interactive Development Environment (IDE) for R. Think of it like a car that is built around an engine. R is the engine and RStudio is the car. Rstudio includes many features to improve the user’s experience.\nLet’s get familiar with RStudio.\n\nOpen R and RStudio\nIf you haven’t done so, download and install RStudio from the link above. After it’s installed, find the RStudio shortcut and fire it up. You should see something like this:\n\n\n\n\n\nThere are four panes in RStudio:\n\nSource: Your primary window for writing code to send to the console, this is where you write and save R “scripts”\nConsole: This is where code is executed in R - you should almost never write code here.\nEnvironment, History, etc.: A tabbed window showing your working environment, code execution history, and other useful things\nFiles, plots, etc.: A tabbed window showing a file explorer, a plot window, list of installed packages, help files, and viewer\n\n\n\nScripting\nIn most cases, you will not enter and execute code directly in the console. Code can be written in a script and then sent directly to the console when you’re ready to run it. The key difference here is that a script can be saved and shared.\nOpen a new script from the File menu…\n\n\n\n\n\n\n\nExecuting code in RStudio\nAfter you write code in your script, it can be sent to the Console to run the code in R. Anything you write in the script will not be run or saved in R until it is sent to the console. There are two ways to do this. First, you can hit the Run button at the top right of the scripting window. Second, you can use ctrl+enter (cmd+enter on a Mac). Both approaches will send the selected line to the console, then move to the next line in your script. You can also highlight and send an entire block of code."
  },
  {
    "objectID": "index.html#r-language-fundamentals",
    "href": "index.html#r-language-fundamentals",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "R language fundamentals",
    "text": "R language fundamentals\nR is built around functions. These are commands that do specific things based on what you provide. The basic syntax of a function follows the form: function_name(arg1, arg2, ...).\nWith the base install, you will gain access to many functions (2336, to be exact). Some examples:\n\n# print\nprint('hello world!')\n\n[1] \"hello world!\"\n\n# sequence\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n# random numbers\nrnorm(100, mean = 10, sd = 2)\n\n  [1] 10.232173  8.094839 11.959016 11.196679  9.704576  8.904405  7.967567\n  [8]  9.469886  5.663704  9.625962 12.383187  8.329262  7.985390 13.818658\n [15]  9.396054 10.102130  8.843353 10.670462 10.931472 10.270194  9.016486\n [22]  8.261986 10.939512  8.804688  9.276740  9.954149 10.642220  8.097831\n [29] 10.581516 13.126501 12.256919 13.015246 14.544765  9.926497 12.162394\n [36] 12.760891  9.594558 11.011407  9.980140  9.678923 13.046535  8.258500\n [43]  9.340588  9.709328 10.592199  8.609020  8.718458 13.782351 11.583348\n [50] 11.552581  9.561173 10.492140 13.056261  9.087856 14.960228  7.729768\n [57] 11.515574 11.498306 11.913426  7.319974  9.255103  7.876346 12.316740\n [64]  8.850640 11.117977 12.218709 11.122116  6.233130 12.046504 11.030149\n [71] 13.378316 11.719558  7.320241  9.361577  9.002660 10.645534  9.558485\n [78] 11.633030 10.406970 10.981409  7.916687 10.981912 11.979331  9.136126\n [85] 10.004621  9.896332  8.557666 11.999972 12.373020 12.504149 10.693918\n [92]  9.424631  8.320284  8.083536  6.496145  9.223996  8.365572 11.210023\n [99]  6.327615 11.038868\n\n# average \nmean(rnorm(100))\n\n[1] 0.1349979\n\n# sum\nsum(rnorm(100))\n\n[1] -0.1878449\n\n\nVery often you will see functions used like this:\n\nmy_random_sum <- sum(rnorm(100))\n\nIn this case the first part of the line is the name of an object. You make this up. Ideally it should have some meaning, but the only rules are that it can’t start with a number and must not have any spaces. The second bit, <-, is the assignment operator. This tells R to take the result of sum(rnorm(100)) and store it in an object named, my_random_sum. It is stored in the environment and can be used by just executing it’s name in the console.\n\nmy_random_sum\n\n[1] -19.76186\n\n\n\nWhat is the environment?\nThere are two outcomes when you run code. First, the code will simply print output directly in the console. Second, there is no output because you have stored it as a variable using <-. Output that is stored is actually saved in the environment. The environment is the collection of named objects that are stored in memory for your current R session. Anything stored in memory will be accessible by it’s name without running the original script that was used to create it.\nWith this, you have the very basics of how we write R code and save objects that can be used later."
  },
  {
    "objectID": "index.html#packages",
    "href": "index.html#packages",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Packages",
    "text": "Packages\nThe base installation of R is quite powerful, but you will soon have a need or desire to go beyond this. Packages provide this ability. They are a standardized way of extending R with new methods, techniques, and programming functionality. There is a lot to say about packages regarding finding them, using them, etc., but for now let’s focus just on the basics.\n\nCRAN\nOne of the reasons for R’s popularity is CRAN, The Comprehensive R Archive Network. This is where you download R and also where most will gain access to packages (there are other places, but that is for later). Not much else to say about this now other than to be aware of it. As of 2022-08-28, there are 18483 packages on CRAN!\n\n\nInstalling packages\nWhen a package gets installed, that means the source code is downloaded and put into your library. A default library location is set for you so no need to worry about that. In fact, on Windows most of this is pretty automatic.\nWe use the install.packages() function to download and install a package. Here, we install the readxl package, then load it using the library() function.\n\ninstall.packages('readxl')\n\nInstalling package into 'C:/Users/mbeck/R/win-library/4.1'\n(as 'lib' is unspecified)\n\n\npackage 'readxl' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\mbeck\\AppData\\Local\\Temp\\Rtmp44h2wj\\downloaded_packages\n\nlibrary(readxl)\n\nAn important aspect of packages is that you only need to download them once, but every time you start RStudio you need to load them with the library() function. Loading a package makes all of its functions available in your current R session."
  },
  {
    "objectID": "index.html#data-structures-in-r",
    "href": "index.html#data-structures-in-r",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Data structures in R",
    "text": "Data structures in R\nNow that you know how to get started in R and how to download packages, we can begin talking about R data structures. Simply put, a data structure is a way for programming languages to handle information storage.\n\nVectors (one-dimensional data)\nThe basic data format in R is a vector - a one-dimensional grouping of elements that have the same type. These are all vectors and they are created with the c function:\n\ndbl_var <- c(1, 2.5, 4.5)\nint_var <- c(1L, 6L, 10L)\nlog_var <- c(TRUE, FALSE, T, F)\nchr_var <- c(\"a\", \"b\", \"c\")\n\nThe four types of vectors are double (or numeric), integer, logical, and character. Each type has some useful properties:\n\nclass(dbl_var)\n\n[1] \"numeric\"\n\nlength(log_var)\n\n[1] 4\n\n\n\n\nData frames (two-dimensional data)\nA collection of vectors represented as one data object are often described as two-dimensional data, or in R speak, a data frame (i.e., data.frame()). Think of them like your standard spreadsheet, where each column describes a variable (vector) and rows link observations between columns. Here’s a simple example:\n\nltrs <- c('a', 'b', 'c')\nnums <- c(1, 2, 3)\nlogs <- c(T, F, T)\nmydf <- data.frame(ltrs, nums, logs)\nmydf\n\n  ltrs nums  logs\n1    a    1  TRUE\n2    b    2 FALSE\n3    c    3  TRUE\n\n\nThe only constraints required to make a data frame are:\n\nEach column (vector) contains the same type of data\nThe number of observations in each column is equal.\n\nYou might also see data frames described as “tibbles”. This is a modern re-envisioning of the data frame. For all practical purposes, you can treat them the same."
  },
  {
    "objectID": "index.html#getting-your-data-into-r",
    "href": "index.html#getting-your-data-into-r",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Getting your data into R",
    "text": "Getting your data into R\nIt is the rare case when you manually enter your data in R, not to mention impractical for most datasets. Most data analysis workflows typically begin with importing a dataset from an external source. Literally, this means committing a dataset to memory (i.e., storing it as an object) as one of R’s data structure formats. We’ll be using read_excel() function from the readxl package.\nWe can import the ExampleSites.xlsx dataset as follows. Note the use of a relative file path. You can see what R is using as your “working directory” using the getwd() function.\n\nsitdat <- read_excel('data/ExampleSites.xlsx')\n\nLet’s explore the dataset a bit.\n\n# get the dimensions\ndim(sitdat)\n\n[1] 58  5\n\n# get the column names\nnames(sitdat)\n\n[1] \"Monitoring Location ID\"        \"Monitoring Location Name\"     \n[3] \"Monitoring Location Latitude\"  \"Monitoring Location Longitude\"\n[5] \"Location Group\"               \n\n# see the first six rows\nhead(sitdat)\n\n# A tibble: 6 x 5\n  `Monitoring Location ID` `Monitoring Location Name`    Monit~1 Monit~2 Locat~3\n  <chr>                    <chr>                           <dbl>   <dbl> <chr>  \n1 ABT-010                  477 Lowell Rd, Concord           42.5   -71.4 Lower ~\n2 ABT-026                  Rte 2, Concord                   42.5   -71.4 Lower ~\n3 ABT-033                  Rte 62, W Concord                42.5   -71.4 Lower ~\n4 ABT-044                  Rte 62 (Damonmill), W Concord    42.5   -71.4 Lower ~\n5 ABT-047                  Damonmill dam                    42.5   -71.4 Lower ~\n6 ABT-062                  Rte 62, Acton                    42.4   -71.4 Lower ~\n# ... with abbreviated variable names 1: `Monitoring Location Latitude`,\n#   2: `Monitoring Location Longitude`, 3: `Location Group`\n\n# get the overall structure\nstr(sitdat)\n\ntibble [58 x 5] (S3: tbl_df/tbl/data.frame)\n $ Monitoring Location ID       : chr [1:58] \"ABT-010\" \"ABT-026\" \"ABT-033\" \"ABT-044\" ...\n $ Monitoring Location Name     : chr [1:58] \"477 Lowell Rd, Concord\" \"Rte 2, Concord\" \"Rte 62, W Concord\" \"Rte 62 (Damonmill), W Concord\" ...\n $ Monitoring Location Latitude : num [1:58] 42.5 42.5 42.5 42.5 42.5 ...\n $ Monitoring Location Longitude: num [1:58] -71.4 -71.4 -71.4 -71.4 -71.4 ...\n $ Location Group               : chr [1:58] \"Lower Assabet\" \"Lower Assabet\" \"Lower Assabet\" \"Lower Assabet\" ...\n\n\nYou can also view a dataset in a spreadsheet style using the View() function:\n\nView(sitdat)"
  },
  {
    "objectID": "index.html#summary",
    "href": "index.html#summary",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Summary",
    "text": "Summary\nIn this lesson we learned about R and Rstudio, some of the basic syntax and data structures in R, and how to import files. We’ve just imported some site data that can be used with the MassWateR package. Next we’ll talk about MassWateR and proceed with the beta testing."
  }
]