[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "All website content created by Marcus Beck."
  },
  {
    "objectID": "index.html#rstudio",
    "href": "index.html#rstudio",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "RStudio",
    "text": "RStudio\nRStudio is the go-to Interactive Development Environment (IDE) for R. Think of it like a car that is built around an engine. R is the engine and RStudio is the car. Rstudio includes many features to improve the user’s experience.\nLet’s get familiar with RStudio.\n\nOpen R and RStudio\nIf you haven’t done so, download and install RStudio from the link above. After it’s installed, find the RStudio shortcut and fire it up. You should see something like this:\n\n\n\n\n\nThere are four panes in RStudio:\n\nSource: Your primary window for writing code to send to the console, this is where you write and save R “scripts”\nConsole: This is where code is executed in R - you should almost never write code here.\nEnvironment, History, etc.: A tabbed window showing your working environment, code execution history, and other useful things\nFiles, plots, etc.: A tabbed window showing a file explorer, a plot window, list of installed packages, help files, and viewer\n\n\n\nScripting\nIn most cases, you will not enter and execute code directly in the console. Code can be written in a script and then sent directly to the console when you’re ready to run it. The key difference here is that a script can be saved and shared.\nOpen a new script from the File menu…\n\n\n\n\n\n\n\nExecuting code in RStudio\nAfter you write code in your script, it can be sent to the Console to run the code in R. Anything you write in the script will not be run or saved in R until it is sent to the console. There are two ways to do this. First, you can hit the Run button at the top right of the scripting window. Second, you can use ctrl+enter (cmd+enter on a Mac). Both approaches will send the selected line to the console, then move to the next line in your script. You can also highlight and send an entire block of code."
  },
  {
    "objectID": "index.html#r-language-fundamentals",
    "href": "index.html#r-language-fundamentals",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "R language fundamentals",
    "text": "R language fundamentals\nR is built around functions. These are commands that do specific things based on what you provide. The basic syntax of a function follows the form: function_name(arg1, arg2, ...).\nWith the base install, you will gain access to many functions (2336, to be exact). Some examples:\n\n# print\nprint('hello world!')\n\n[1] \"hello world!\"\n\n# sequence\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n# random numbers\nrnorm(100, mean = 10, sd = 2)\n\n  [1]  8.858860 10.445630  9.119766  9.513237 10.888739 12.439322  9.814821\n  [8] 12.299629 10.059332  9.536443 12.600915 11.314773  8.481072  8.730556\n [15] 10.945211 12.339686 11.672362  9.192239 10.601794  8.342835 12.612648\n [22]  8.945902 12.460151 10.895179 13.724489  6.236714  9.239879 15.497531\n [29] 10.191962 11.819819 11.810664  9.394094 13.502747  6.587820 11.914160\n [36]  9.993803  8.979530 11.524770  9.203116  8.815590  9.180082 13.272100\n [43] 11.251154 11.637692  9.772104 13.117259  7.592897 10.376620  8.906295\n [50] 10.833438  9.225270 11.281320  9.372781 10.028116  9.329473  9.262481\n [57]  9.301012  8.134134  7.940940  8.384760  7.082957  4.409975  9.445143\n [64] 13.225632 13.266692 13.653756 11.934872  8.263921 11.488471 12.364368\n [71] 11.367016  8.414107  6.791836 11.136564  7.479506  7.677899  8.565882\n [78]  9.525012  6.150180 11.923753  6.884096 10.357159 10.146840  9.601307\n [85] 12.047773 13.013092  7.232879 11.002065  9.460183 12.431270  9.385523\n [92]  8.406595 11.586429 12.577569  8.258652  9.882950 12.036784 13.185761\n [99] 10.913893 10.681567\n\n# average \nmean(rnorm(100))\n\n[1] -0.05349596\n\n# sum\nsum(rnorm(100))\n\n[1] -0.8217194\n\n\nVery often you will see functions used like this:\n\nmy_random_sum <- sum(rnorm(100))\n\nIn this case the first part of the line is the name of an object. You make this up. Ideally it should have some meaning, but the only rules are that it can’t start with a number and must not have any spaces. The second bit, <-, is the assignment operator. This tells R to take the result of sum(rnorm(100)) and store it in an object named, my_random_sum. It is stored in the environment and can be used by just executing it’s name in the console.\n\nmy_random_sum\n\n[1] -1.629518\n\n\n\nWhat is the environment?\nThere are two outcomes when you run code. First, the code will simply print output directly in the console. Second, there is no output because you have stored it as a variable using <-. Output that is stored is actually saved in the environment. The environment is the collection of named objects that are stored in memory for your current R session. Anything stored in memory will be accessible by it’s name without running the original script that was used to create it.\nWith this, you have the very basics of how we write R code and save objects that can be used later."
  },
  {
    "objectID": "index.html#packages",
    "href": "index.html#packages",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Packages",
    "text": "Packages\nThe base installation of R is quite powerful, but you will soon have a need or desire to go beyond this. Packages provide this ability. They are a standardized way of extending R with new methods, techniques, and programming functionality. There is a lot to say about packages regarding finding them, using them, etc., but for now let’s focus just on the basics.\n\nCRAN\nOne of the reasons for R’s popularity is CRAN, The Comprehensive R Archive Network. This is where you download R and also where most will gain access to packages (there are other places, but that is for later). Not much else to say about this now other than to be aware of it. As of 2022-09-01, there are 18528 packages on CRAN!\n\n\nInstalling packages\nWhen a package gets installed, that means the source code is downloaded and put into your library. A default library location is set for you so no need to worry about that. In fact, on Windows most of this is pretty automatic.\nWe use the install.packages() function to download and install a package. Here, we install the readxl package, then load it using the library() function.\n\ninstall.packages('readxl')\n\nInstalling package into 'C:/Users/Marcus.SCCWRP2K/R/win-library/4.1'\n(as 'lib' is unspecified)\n\n\npackage 'readxl' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Marcus.SCCWRP2K\\AppData\\Local\\Temp\\RtmpKGfCBB\\downloaded_packages\n\nlibrary(readxl)\n\nAn important aspect of packages is that you only need to download them once, but every time you start RStudio you need to load them with the library() function. Loading a package makes all of its functions available in your current R session."
  },
  {
    "objectID": "index.html#data-structures-in-r",
    "href": "index.html#data-structures-in-r",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Data structures in R",
    "text": "Data structures in R\nNow that you know how to get started in R and how to download packages, we can begin talking about R data structures. Simply put, a data structure is a way for programming languages to handle information storage.\n\nVectors (one-dimensional data)\nThe basic data format in R is a vector - a one-dimensional grouping of elements that have the same type. These are all vectors and they are created with the c function:\n\ndbl_var <- c(1, 2.5, 4.5)\nint_var <- c(1L, 6L, 10L)\nlog_var <- c(TRUE, FALSE, T, F)\nchr_var <- c(\"a\", \"b\", \"c\")\n\nThe four types of vectors are double (or numeric), integer, logical, and character. Each type has some useful properties:\n\nclass(dbl_var)\n\n[1] \"numeric\"\n\nlength(log_var)\n\n[1] 4\n\n\n\n\nData frames (two-dimensional data)\nA collection of vectors represented as one data object are often described as two-dimensional data, or in R speak, a data frame (i.e., data.frame()). Think of them like your standard spreadsheet, where each column describes a variable (vector) and rows link observations between columns. Here’s a simple example:\n\nltrs <- c('a', 'b', 'c')\nnums <- c(1, 2, 3)\nlogs <- c(T, F, T)\nmydf <- data.frame(ltrs, nums, logs)\nmydf\n\n  ltrs nums  logs\n1    a    1  TRUE\n2    b    2 FALSE\n3    c    3  TRUE\n\n\nThe only constraints required to make a data frame are:\n\nEach column (vector) contains the same type of data\nThe number of observations in each column is equal.\n\nYou might also see data frames described as “tibbles”. This is a modern re-envisioning of the data frame. For all practical purposes, you can treat them the same."
  },
  {
    "objectID": "index.html#getting-your-data-into-r",
    "href": "index.html#getting-your-data-into-r",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Getting your data into R",
    "text": "Getting your data into R\nIt is the rare case when you manually enter your data in R, not to mention impractical for most datasets. Most data analysis workflows typically begin with importing a dataset from an external source. Literally, this means committing a dataset to memory (i.e., storing it as an object) as one of R’s data structure formats. We’ll be using read_excel() function from the readxl package.\nWe can import the ExampleSites.xlsx dataset as follows. Note the use of a relative file path. You can see what R is using as your “working directory” using the getwd() function.\n\nsitdat <- read_excel('data/ExampleSites.xlsx')\n\nLet’s explore the dataset a bit.\n\n# get the dimensions\ndim(sitdat)\n\n[1] 58  5\n\n# get the column names\nnames(sitdat)\n\n[1] \"Monitoring Location ID\"        \"Monitoring Location Name\"     \n[3] \"Monitoring Location Latitude\"  \"Monitoring Location Longitude\"\n[5] \"Location Group\"               \n\n# see the first six rows\nhead(sitdat)\n\n# A tibble: 6 x 5\n  `Monitoring Location ID` `Monitoring Location Name`    Monit~1 Monit~2 Locat~3\n  <chr>                    <chr>                           <dbl>   <dbl> <chr>  \n1 ABT-010                  477 Lowell Rd, Concord           42.5   -71.4 Lower ~\n2 ABT-026                  Rte 2, Concord                   42.5   -71.4 Lower ~\n3 ABT-033                  Rte 62, W Concord                42.5   -71.4 Lower ~\n4 ABT-044                  Rte 62 (Damonmill), W Concord    42.5   -71.4 Lower ~\n5 ABT-047                  Damonmill dam                    42.5   -71.4 Lower ~\n6 ABT-062                  Rte 62, Acton                    42.4   -71.4 Lower ~\n# ... with abbreviated variable names 1: `Monitoring Location Latitude`,\n#   2: `Monitoring Location Longitude`, 3: `Location Group`\n\n# get the overall structure\nstr(sitdat)\n\ntibble [58 x 5] (S3: tbl_df/tbl/data.frame)\n $ Monitoring Location ID       : chr [1:58] \"ABT-010\" \"ABT-026\" \"ABT-033\" \"ABT-044\" ...\n $ Monitoring Location Name     : chr [1:58] \"477 Lowell Rd, Concord\" \"Rte 2, Concord\" \"Rte 62, W Concord\" \"Rte 62 (Damonmill), W Concord\" ...\n $ Monitoring Location Latitude : num [1:58] 42.5 42.5 42.5 42.5 42.5 ...\n $ Monitoring Location Longitude: num [1:58] -71.4 -71.4 -71.4 -71.4 -71.4 ...\n $ Location Group               : chr [1:58] \"Lower Assabet\" \"Lower Assabet\" \"Lower Assabet\" \"Lower Assabet\" ...\n\n\nYou can also view a dataset in a spreadsheet style using the View() function:\n\nView(sitdat)"
  },
  {
    "objectID": "index.html#summary",
    "href": "index.html#summary",
    "title": "Introduction to R: MassWateR beta testing",
    "section": "Summary",
    "text": "Summary\nIn this lesson we learned about R and Rstudio, some of the basic syntax and data structures in R, and how to import files. We’ve just imported some site data that can be used with the MassWateR package. Next we’ll talk about MassWateR and proceed with the beta testing."
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup R and RStudio",
    "section": "",
    "text": "Thanks for your interest in the MassWateR R package. For the package beta testing, we will be using RStudio as our interface to R. In order to participate in this testing, you will need to make sure you have R and RStudio installed on your computer.\nThanks to the USGS-R Training group and Data Carpentry for making their installation materials available. The following instructions come directly from their materials, with a few minor edits to help you get set up."
  },
  {
    "objectID": "setup.html#install-r-and-rstudio",
    "href": "setup.html#install-r-and-rstudio",
    "title": "Setup R and RStudio",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\nR and RStudio are separate downloads and installations. R is the underlying statistical computing software. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio.\n\nWindows: Download and install R\nGo to CRAN and download the R installer for Windows. Make sure to choose the latest stable version (v4.2.1 as of September 2022).\nOnce the installer downloads, Right-click on it and select “Run as administrator”.\nType in your credentials and click yes (or if you don’t have administrator access have your IT rep install with Admin privileges).\n\nYou can click next through the standard dialogs and accept most defaults. But at the destination screen, please verify that it is installing it to C:\\Program Files\\R\n\nAt the “Select Components” screen, you can accept the default and install both 32-bit and 64-bit versions.\n\nAt this screen, uncheck ‘Create a desktop icon’ because non-admin users in Windows will be unable to delete it.\n\n\n\nWindows: Download and install RStudio\nDownload RStudio from here.\nAfter download, double-click the installer. It will ask for your administrator credentials to install (you might need to have your IT rep install again).\nAccept all the default options for the RStudio install.\n\n\n\nmacOS: Download and install R\n\nDownload and install R from the CRAN website for Mac here.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\n\n\n\nmacOS: Download and install RStudio\n\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Mac OS X 10.6+ (64-bit) (where x, y, and z represent version numbers)\nDouble click the file to install RStudio"
  },
  {
    "objectID": "setup.html#check-install",
    "href": "setup.html#check-install",
    "title": "Setup R and RStudio",
    "section": "Check Install",
    "text": "Check Install\n\nOpen RStudio\nOnce installed, RStudio should be accessible from the start menu. Start up RStudio. Once running it should look something like this:"
  },
  {
    "objectID": "setup.html#rstudio-cloud",
    "href": "setup.html#rstudio-cloud",
    "title": "Setup R and RStudio",
    "section": "RStudio Cloud",
    "text": "RStudio Cloud\nIf you can’t install R or RStudio prior to beta testing, you can use use RStudio in the cloud. This is only a backup option and we strongly encourage you to troubleshoot the installation when able.\nTo use RStudio Cloud, copy this link and paste it in a web browser: https://rstudio.cloud/project/4426781\nIf you do not have an RStudio Cloud account, you will see this screen when you first visit the URL:\n\n\nYou can setup an account for free using a login you create or through a third-party (Google or GitHub).\nAfter your account is setup, you should a screen that looks something like this:\n\n\nYou’ll see that this is a TEMPORARY COPY under your account. Make it permanent by clicking the button on top. This will save any changes you make to this project under your account.\nThis project includes an installation of MassWateR and a copy of the code used in the introduction on this site."
  }
]